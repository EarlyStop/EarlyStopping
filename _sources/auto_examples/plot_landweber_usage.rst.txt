
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_landweber_usage.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_landweber_usage.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_landweber_usage.py:


Usage of the Landweber class 
======================================

We illustrate the usage and available methods of the Landweber class via a
small example.

.. GENERATED FROM PYTHON SOURCE LINES 8-19

.. code-block:: Python


    import numpy as np
    import matplotlib.pyplot as plt
    import EarlyStopping as es
    from scipy.sparse import dia_matrix
    import seaborn as sns

    np.random.seed(42)
    sns.set_theme()









.. GENERATED FROM PYTHON SOURCE LINES 20-23

Generating synthetic data
-------------------------
To simulate some data we consider the signals from `Blanchard, Hoffmann and Rei√ü (2018) <https://projecteuclid.org/journals/electronic-journal-of-statistics/volume-12/issue-2/Early-stopping-for-statistical-inverse-problems-via-truncated-SVD-estimation/10.1214/18-EJS1482.full>`_.

.. GENERATED FROM PYTHON SOURCE LINES 23-42

.. code-block:: Python

    sample_size = 10000
    indices = np.arange(sample_size) + 1

    signal_supersmooth = 5 * np.exp(-0.1 * indices)
    signal_smooth = 5000 * np.abs(np.sin(0.01 * indices)) * indices ** (-1.6)
    signal_rough = 250 * np.abs(np.sin(0.002 * indices)) * indices ** (-0.8)

    true_signal = signal_rough

    plt.figure(figsize=(14, 4))
    plt.plot(indices, signal_supersmooth, label="supersmooth signal")
    plt.plot(indices, signal_smooth, label="smooth signal")
    plt.plot(indices, signal_rough, label="rough signal")
    plt.ylabel("Signal")
    plt.xlabel("Index")
    plt.ylim([0, 0.4])
    plt.legend(loc="upper right")
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_landweber_usage_001.png
   :alt: plot landweber usage
   :srcset: /auto_examples/images/sphx_glr_plot_landweber_usage_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 43-44

We simulate data from a prototypical inverse problem based on one of the signals

.. GENERATED FROM PYTHON SOURCE LINES 44-56

.. code-block:: Python

    true_noise_level = 0.01
    noise = true_noise_level * np.random.normal(0, 1, sample_size)

    eigenvalues = 1 / np.sqrt(indices)
    design = dia_matrix(np.diag(eigenvalues))

    response = eigenvalues * true_signal + noise

    # Initialize Landweber class
    alg = es.Landweber(design, response, learning_rate=1, true_signal=true_signal, true_noise_level=true_noise_level)
    alg.iterate(3000)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    UserWarning: No initial_value is given, using zero by default.
    SparseEfficiencyWarning: spsolve requires A be CSC or CSR matrix format
    SparseEfficiencyWarning: spsolve is more efficient when sparse b is in the CSC matrix format




.. GENERATED FROM PYTHON SOURCE LINES 57-58

Bias-variance decomposition (weak/strong)

.. GENERATED FROM PYTHON SOURCE LINES 58-73

.. code-block:: Python

    plt.figure()
    plt.plot(indices[0 : alg.iteration + 1], alg.weak_variance, label="Weak variance")
    plt.plot(indices[0 : alg.iteration + 1], alg.weak_bias2, label="Weak squared bias")
    plt.legend(loc="upper right")
    plt.show()

    plt.figure()
    plt.plot(indices[0 : alg.iteration + 1], alg.strong_variance, label="Strong variance")
    plt.plot(indices[0 : alg.iteration + 1], alg.strong_bias2, label="Strong squared bias")
    plt.legend(loc="upper right")
    plt.show()

    print(f"Weak balanced oracle: {alg.get_weak_balanced_oracle(3000)}")
    print(f"Strong balanced oracle: {alg.get_strong_balanced_oracle(3000)}")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_landweber_usage_002.png
         :alt: plot landweber usage
         :srcset: /auto_examples/images/sphx_glr_plot_landweber_usage_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_landweber_usage_003.png
         :alt: plot landweber usage
         :srcset: /auto_examples/images/sphx_glr_plot_landweber_usage_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Weak balanced oracle: 1074
    Strong balanced oracle: 1185




.. GENERATED FROM PYTHON SOURCE LINES 74-75

Early stopping w/ discrepancy principle

.. GENERATED FROM PYTHON SOURCE LINES 75-88

.. code-block:: Python

    critical_value = sample_size * true_noise_level**2
    discrepancy_time = alg.get_discrepancy_stop(critical_value, 3000)
    estimated_signal = alg.get_estimate(discrepancy_time)

    print(f"Critical value: {critical_value}.")
    print(f"Discrepancy stopping time: {discrepancy_time}")

    plt.figure(figsize=(14, 4))
    plt.plot(indices, estimated_signal, label="Estimated signal at stopping time")
    plt.plot(indices, true_signal, label="True signal")
    plt.ylim([0, 2])
    plt.legend(loc="upper right")
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_landweber_usage_004.png
   :alt: plot landweber usage
   :srcset: /auto_examples/images/sphx_glr_plot_landweber_usage_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Critical value: 1.0.
    Discrepancy stopping time: 670





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 8.683 seconds)


.. _sphx_glr_download_auto_examples_plot_landweber_usage.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_landweber_usage.ipynb <plot_landweber_usage.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_landweber_usage.py <plot_landweber_usage.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_landweber_usage.zip <plot_landweber_usage.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
